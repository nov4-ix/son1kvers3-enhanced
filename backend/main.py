#!/usr/bin/env python3
"""
üéµ Son1kVers3 Enhanced - Backend Principal
Sistema de generaci√≥n musical avanzado con IA
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import uvicorn
import os
import logging
from datetime import datetime

# Importar endpoints de comunidad
from community_endpoints import router as community_router

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="Son1kVers3 Enhanced API",
    description="Sistema de generaci√≥n musical avanzado con IA",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000", "http://localhost:8000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers
app.include_router(community_router)

# Importar el procesador del CODEX
from codex_processor import init_codex_processor

# Inicializar el procesador del CODEX
codex_processor = init_codex_processor()

# Pixel AI Assistant endpoint
@app.post("/api/pixel/chat")
async def pixel_chat(request: dict):
    """Endpoint para el asistente Pixel con conocimiento del CODEX"""
    try:
        message = request.get("message", "")
        history = request.get("history", [])
        
        # Usar el procesador del CODEX para generar respuesta inteligente
        response = codex_processor.get_pixel_response(message)
        
        return {"response": response}
        
    except Exception as e:
        logger.error(f"Error en pixel chat: {e}")
        return {"response": "Lo siento, hubo un error. Por favor, int√©ntalo de nuevo."}

# Health check endpoint
@app.get("/")
async def root():
    return {
        "message": "Son1kVers3 Enhanced API v2.0",
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "services": {
            "web_audio": "active",
            "voice_cloning": "active",
            "nova_post_pilot": "active",
            "analytics": "active",
            "stealth_system": "active"
        }
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "2.0.0"
    }

# API endpoints
@app.get("/api/status")
async def get_status():
    return {
        "status": "online",
        "services": {
            "web_audio_generator": "ready",
            "voice_cloning": "ready",
            "nova_post_pilot": "ready",
            "analytics": "ready",
            "stealth_system": "ready"
        },
        "features": [
            "Real-time music generation",
            "Voice cloning with so-VITS & Bark",
            "AI-powered social media analysis",
            "Real-time analytics",
            "Stealth system with account rotation"
        ]
    }

# Music generation endpoints
@app.post("/api/music/generate")
async def generate_music(request: dict):
    """Generate music using Web Audio API"""
    try:
        # This would integrate with the WebAudioGenerator service
        return {
            "success": True,
            "message": "Music generation endpoint ready",
            "audio_url": "/api/audio/generated_track.wav"
        }
    except Exception as e:
        logger.error(f"Music generation error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# Voice cloning endpoints
@app.post("/api/voice/clone")
async def clone_voice(request: dict):
    """Clone voice using so-VITS or Bark"""
    try:
        # This would integrate with the VoiceCloningService
        return {
            "success": True,
            "message": "Voice cloning endpoint ready",
            "audio_url": "/api/audio/cloned_voice.wav"
        }
    except Exception as e:
        logger.error(f"Voice cloning error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# Social media endpoints
@app.post("/api/social/analyze")
async def analyze_social_media(request: dict):
    """Analyze social media with Nova Post Pilot"""
    try:
        # This would integrate with the NovaPostPilotService
        return {
            "success": True,
            "message": "Social media analysis endpoint ready",
            "analysis": {
                "engagement_rate": 4.8,
                "optimal_posting_times": ["6-9 PM", "8-10 PM"],
                "trending_topics": ["#AIMusic", "#MusicTech"]
            }
        }
    except Exception as e:
        logger.error(f"Social media analysis error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# Analytics endpoints
@app.get("/api/analytics/dashboard")
async def get_analytics_dashboard():
    """Get analytics dashboard data"""
    try:
        # This would integrate with the AnalyticsService
        return {
            "success": True,
            "message": "Analytics dashboard endpoint ready",
            "metrics": {
                "total_plays": 1250,
                "engagement_rate": 4.8,
                "growth_rate": 15.2
            }
        }
    except Exception as e:
        logger.error(f"Analytics error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# Stealth system endpoints
@app.get("/api/stealth/status")
async def get_stealth_status():
    """Get stealth system status"""
    try:
        # This would integrate with the StealthSystem
        return {
            "success": True,
            "message": "Stealth system endpoint ready",
            "status": {
                "active_accounts": 3,
                "rotation_enabled": True,
                "stealth_level": 8
            }
        }
    except Exception as e:
        logger.error(f"Stealth system error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    # Get configuration from environment variables
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", 8000))
    debug = os.getenv("DEBUG", "true").lower() == "true"
    
    logger.info(f"Starting Son1kVers3 Enhanced API on {host}:{port}")
    logger.info(f"Debug mode: {debug}")
    
    # Run the application
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=debug,
        log_level="info"
    )


